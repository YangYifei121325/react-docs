import{_ as a,c as i,o as s,a4 as n}from"./chunks/framework.C8RqO6c5.js";const u=JSON.parse('{"title":"useNavigation","description":"","frontmatter":{},"headers":[],"relativePath":"router/hooks/useNavigation.md","filePath":"router/hooks/useNavigation.md","lastUpdated":1744916544000}'),e={name:"router/hooks/useNavigation.md"},t=n(`<h1 id="usenavigation" tabindex="-1">useNavigation <a class="header-anchor" href="#usenavigation" aria-label="Permalink to &quot;useNavigation&quot;">​</a></h1><h2 id="什么是-usenavigation" tabindex="-1">什么是 useNavigation <a class="header-anchor" href="#什么是-usenavigation" aria-label="Permalink to &quot;什么是 useNavigation&quot;">​</a></h2><p><code>useNavigation</code> 是一个 React-Router 的钩子，用于获取当前路由的导航状态。</p><h2 id="如何使用-usenavigation" tabindex="-1">如何使用 useNavigation <a class="header-anchor" href="#如何使用-usenavigation" aria-label="Permalink to &quot;如何使用 useNavigation&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useNavigation } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> navigation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="navigation-state" tabindex="-1">navigation.state <a class="header-anchor" href="#navigation-state" aria-label="Permalink to &quot;navigation.state&quot;">​</a></h2><ul><li><code>idle</code> 空闲状态</li><li><code>submitting</code> 提交状态</li><li><code>loading</code> 加载状态</li></ul><p>在使用正常导航的情况或者<code>GET</code>提交表单的时候会经过以下状态转换：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>idle → loading → idle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在使用 POST、PUT、PATCH 或 DELETE 提交的表单会经历以下状态转换：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>idle → submitting → loading → idle</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果没有loader,则不会经历<code>loading</code>状态</p></div><p>可以编写自己的逻辑来处理这些状态</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> navigation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isLoading</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigation.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;loading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isSubmitting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigation.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;submitting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isIdle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigation.state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;idle&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="navigation-formdata" tabindex="-1">navigation.formData <a class="header-anchor" href="#navigation-formdata" aria-label="Permalink to &quot;navigation.formData&quot;">​</a></h2><p>当使用原生表单<code>&lt;form&gt;</code>提交的时候,并且是POST、PUT、PATCH 或 DELETE 请求的时候,可以获取到表单的数据。</p><p>如果是GET请求则 <code>formData</code> 为 空,需要在 <code>navigation.location.search</code> 中获取GET请求的数据</p><h2 id="navigation-json" tabindex="-1">navigation.json <a class="header-anchor" href="#navigation-json" aria-label="Permalink to &quot;navigation.json&quot;">​</a></h2><p>当提交表单的时候,如果表单的<code>enctype</code>为<code>application/json</code>的时候,可以获取到表单的数据。</p><h2 id="navigation-text" tabindex="-1">navigation.text <a class="header-anchor" href="#navigation-text" aria-label="Permalink to &quot;navigation.text&quot;">​</a></h2><p>当提交表单的时候,如果表单的<code>enctype</code>为<code>text/plain</code>的时候,可以获取到表单的数据。</p><h2 id="navigation-location" tabindex="-1">navigation.location <a class="header-anchor" href="#navigation-location" aria-label="Permalink to &quot;navigation.location&quot;">​</a></h2><p>获取当前路由的位置跟<code>useLocation</code>的返回值是一样的</p><h2 id="navigation-formaction" tabindex="-1">navigation.formAction <a class="header-anchor" href="#navigation-formaction" aria-label="Permalink to &quot;navigation.formAction&quot;">​</a></h2><p>获取表单的提交地址例如: <code>/login</code>,如果是 <code>GET</code>则为空，如果是<code>/detail/id</code>则返回<code>/id</code></p><h2 id="navigation-formmethod" tabindex="-1">navigation.formMethod <a class="header-anchor" href="#navigation-formmethod" aria-label="Permalink to &quot;navigation.formMethod&quot;">​</a></h2><p>获取表单的提交方式例如: <code>POST</code>, <code>GET</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code></p><h2 id="navigation-formenctype" tabindex="-1">navigation.formEncType <a class="header-anchor" href="#navigation-formenctype" aria-label="Permalink to &quot;navigation.formEncType&quot;">​</a></h2><p>获取表单的提交方式例如: <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, <code>application/json</code> <code>text/plain</code></p>`,29),o=[t];function l(d,p,h,r,c,k){return s(),i("div",null,o)}const v=a(e,[["render",l]]);export{u as __pageData,v as default};
