import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.C8RqO6c5.js";const t="/react-docs/assets/image.BBpv0hIX.png",u=JSON.parse('{"title":"React开发环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"basic/development.md","filePath":"basic/development.md","lastUpdated":1720799128000}'),n={name:"basic/development.md"},l=e('<h1 id="react开发环境搭建" tabindex="-1">React开发环境搭建 <a class="header-anchor" href="#react开发环境搭建" aria-label="Permalink to &quot;React开发环境搭建&quot;">​</a></h1><p>选择一个你喜欢的目录，然后运行以下命令：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>执行完成之后会让你输入项目名称 例如 <code>react-demo</code></li><li>接下来会让你选择一个框架 这时候选择 <code>react</code></li><li>然后选择 <code>TypeScript + SWC</code> 如果你不会ts就选择js</li></ul><p><img src="'+t+`" alt="alt text"></p><h2 id="目录介绍" tabindex="-1">目录介绍 <a class="header-anchor" href="#目录介绍" aria-label="Permalink to &quot;目录介绍&quot;">​</a></h2><ul><li>public 公共目录</li><li>src <ul><li>assets 静态资源</li><li>App.css 根组件样式</li><li>App.tsx 根组件</li><li>index.css 全局css文件</li><li>main.tsx 全局tsx文件</li><li>vite-env.d.ts 声明文件</li></ul></li><li>.eslintrc.cjs eslint配置文件</li><li>.gitignore git忽略文件</li><li>index.html 入口文件index.html</li><li>package.json 项目依赖模块文件</li><li>tsconfig.json ts配置文件</li><li>tsconfig.node.json vite-ts配置文件</li><li>vite.config.ts vite配置文件</li></ul><h3 id="faq" tabindex="-1">FAQ: <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ:&quot;">​</a></h3><ul><li><strong>public公共目录和assets静态资源有什么区别?</strong></li></ul><p>答：public目录的资源编译之后会存放到根目录，而静态资源assets是会随着项目一起打包的，public则不会被编译。</p><ul><li><strong>为什么main.tsx的<code>document.getElementById(&#39;root&#39;)!</code>要加一个!</strong></li></ul><p>答：因为<code>document.getElementById(&#39;root&#39;)</code>返回可能为空，这时候就会报错。!是非空断言，告诉编辑器这个表达式不会为空。</p><h2 id="命令介绍-package-json" tabindex="-1">命令介绍(package.json) <a class="header-anchor" href="#命令介绍-package-json" aria-label="Permalink to &quot;命令介绍(package.json)&quot;">​</a></h2><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//启动开发模式项目</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tsc &amp;&amp; vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//打包构建生产包</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//代码检查</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite preview&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //预览模式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>eslint命令详解</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .：对当前目录（以及子目录）中的文件运行</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESLint。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--ext</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts,tsx：指定要检查的文件扩展名为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .tsx，即</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 和</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> React</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--report-unused-disable-directives：报告未使用的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint-disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指令。这可以帮助你清理不再需要的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESLint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 禁用指令。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--max-warnings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0：将警告数量限制为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0。如果有任何警告，ESLint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 将返回非零退出代码，这通常用于在</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CI/CD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 环境中确保代码库没有任何警告。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,16),p=[l];function h(r,k,d,o,c,F){return a(),i("div",null,p)}const E=s(n,[["render",h]]);export{u as __pageData,E as default};
